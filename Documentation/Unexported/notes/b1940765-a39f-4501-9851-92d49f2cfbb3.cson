createdAt: "2020-04-25T16:01:43.407Z"
updatedAt: "2020-04-25T16:20:29.453Z"
type: "MARKDOWN_NOTE"
folder: "f0b6ec48d3d358b76274"
title: "[JGELDOCS] Hex Stacks"
tags: []
content: '''
  # [JGELDOCS] Hex Stacks
  
  For producing useful error codes, even without a debug environment, JGEL implements annotations for marking classes  and methods with two byte hex values.
  
  These values are formatted as such
  [ThreadName]:[Class],[Method](optional: [Error Code])
  
  eg:
  ```
  Thread:GameThread
  Class:0x01
  Method: 0x01
  Error code 0x01
  ```
  
  produces
  ```
  GameThread:0x010101
  ```
  
  These error codes will be displayed in errornotif dialog boxes provided by the EMSHelper, written in error logs, and printed to the console.
  
  For an error code to be produced, the class of exception must have the `ClassHex(0xXX)`annotation identifyer, otherwise the entire code will be a placeholder. `0xFFFFFF`
  
  An exception parsed to the EMSHelper with no specified error code will have a placeholder value of 0xFF at the end, representing an error with no specified hex value.
  
  ## JGEL's Hex Values
  ### Classes
  Jgel reserves hex id's up to the value of 63 (0x3F). Therefore, class identifiers from `0x00` to `0x3F` are not to be used externally.
  
  This reservation provides room for 192 classes in the range `0x40` to `0xFF` for use externally.
  
  0x01 engine.JGEL
  ...
  0x3F
  0x40 Intended for main game payload
  0x41+ Self identified game classes.
'''
linesHighlighted: []
isStarred: false
isTrashed: false
