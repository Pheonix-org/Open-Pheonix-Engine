{
	"info": {
		"_postman_id": "79035bcc-6ece-4405-bb2c-0b50d0b22c65",
		"name": "backend",
		"description": "# Backend Root.\n\nContains packages for all things that don't relate to rendering, windows, user interface, etc.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "io",
			"item": [
				{
					"name": "cjar",
					"item": [
						{
							"name": "CJARFactory",
							"item": [
								{
									"name": "CreateStructure(Path path, String name)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										},
										"description": "# CJAR Skeleton Creation\n\nCreates uncompressed directory structure for a CJAR for manual population. Unpopulated, aside from required meta files and placeholders to aid manual population.\n\n## Generated CJAR structure\n```\npath/name.cjar\n    - ASSETS\n        - AUDIO\n            - AMBIENCE\n            - DIALOG\n            - SFX\n            - SOUNDTRACK\n        - FLOWS\n            - QUEST\n            - STORY\n        - GRAPHICAL\n            - BACKGROUND\n            - GUI\n            - MODEL\n            - SPRITE\n            - TILE\n            - HASH\n        - HASH\n            - GLOBAL.plist\n            - LANGUAGE\n                - EN.plist\n        - WORLD\n            - STRUCTURE\n            - CELLS\n            - ENTITY\n    - META-INF\n        - loadscript.ls\n        - meta.cjar\n    - LIBRARY.jar\n```\n\n@param path Location to generate the structure\n@param name Name of the CJAR\n@author Jordan Gray\n@throws IOException if a write error occours."
									},
									"response": []
								}
							],
							"description": "# CJAR Creation Utility.\n\nCreate file, populate, and sign archives for use in the engine.",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "# Content Java Archive\n\nExtention of the Java Archive (*.jar), signable container for assets used by the client, loaded by the engine.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# Container package for input and output.\n\nCJAR, Save data, serialization, etc.",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3048ce7b-e576-4d52-804e-c929a809a2d4",
				"type": "text/javascript",
				"exec": [
					"new OPEX()"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "16f03891-5ae6-4b73-85d1-ec32386f3e35",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}